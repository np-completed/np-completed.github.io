{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../README.md","title":"Home"},{"location":"hosting-and-deployment/enable_github_pages/","text":"Enable Github Pages Github pages requires permissions to be enabled but the process is pretty easy. Create a public repository Navigate to Settings > Pages","title":"Enable Github Pages"},{"location":"hosting-and-deployment/enable_github_pages/#enable-github-pages","text":"Github pages requires permissions to be enabled but the process is pretty easy. Create a public repository Navigate to Settings > Pages","title":"Enable Github Pages"},{"location":"hosting-and-deployment/gh-pages-private-repo/","text":"Github Pages Private Source Code Github pages are great, it provides a free static page hosting, but the only caveat is the repository has to be public repository. And, if you want to keep your source private, you will have to opt for premium plans to host pages from private repository. Here is what I have done, github allows unlimited private repositories, so I created a new private repo where I kept my source code and another repo where my site is hosted. Create Personal Token Create a personal access token. Navigate to Settings and create a PAT. Select Developer settings Select Personal access tokens Now generate a new token, with repo permissions. Once you are done copy the generated token, we will need to set this token during our build. Create secret in private repository Go to your private repo and click the settings: Create github action in private repoPermalink This is where the magic begins, we will build a github action in our private repo. You will need to create a file at .github/workflows/ci.yml name: Build & Publish on: push: branches: [ gh_pages ] pull_request: branches: [ gh_pages ] jobs: build: runs-on: ubuntu-latest steps: - name: Checkout local code uses: actions/checkout@v3 with: path: code token: ${{ secrets.GH_PAGES}} ref: gh_pages # - name: Show Directory Files # run : | # cd code # ls -la - name: python uses: actions/setup-python@v4 with: python-version: \"3.10\" - name: Checkout public repo site uses: actions/checkout@v3 with: token: ${{ secrets.GH_PAGES}} repository: np-completed/np-completed.github.io ref: gh_pages path: site - name: Install dependencies run: python3 -m pip install -r code/requirements.txt - name: Build website run: mkdocs build --config-file code/mkdocs.yml - name: Clean Website run: | pushd site git rm -rf . popd - name: Copy website run : | pushd site # cp -rvf ../code/build/* . cp -rvf ../code/site/* . popd ls -la site/ # ls -la code/site/ - name: Deploy and Publish run: | git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\" git config --global user.name \"github-actions\" pushd site git add . git commit -m \"mkdocs build from Action ${GITHUB_SHA}\" git push origin gh_pages popd Each push changes to the private repository triggers the github action. Next, the GH action job will be executed, to build and publish the site to the public repo without exposing your source code.","title":"Github Pages Private Source Code"},{"location":"hosting-and-deployment/gh-pages-private-repo/#github-pages-private-source-code","text":"Github pages are great, it provides a free static page hosting, but the only caveat is the repository has to be public repository. And, if you want to keep your source private, you will have to opt for premium plans to host pages from private repository. Here is what I have done, github allows unlimited private repositories, so I created a new private repo where I kept my source code and another repo where my site is hosted.","title":"Github Pages Private Source Code"},{"location":"hosting-and-deployment/gh-pages-private-repo/#create-personal-token","text":"Create a personal access token. Navigate to Settings and create a PAT. Select Developer settings Select Personal access tokens Now generate a new token, with repo permissions. Once you are done copy the generated token, we will need to set this token during our build.","title":"Create Personal Token"},{"location":"hosting-and-deployment/gh-pages-private-repo/#create-secret-in-private-repository","text":"Go to your private repo and click the settings:","title":"Create secret in private repository"},{"location":"hosting-and-deployment/gh-pages-private-repo/#create-github-action-in-private-repopermalink","text":"This is where the magic begins, we will build a github action in our private repo. You will need to create a file at .github/workflows/ci.yml name: Build & Publish on: push: branches: [ gh_pages ] pull_request: branches: [ gh_pages ] jobs: build: runs-on: ubuntu-latest steps: - name: Checkout local code uses: actions/checkout@v3 with: path: code token: ${{ secrets.GH_PAGES}} ref: gh_pages # - name: Show Directory Files # run : | # cd code # ls -la - name: python uses: actions/setup-python@v4 with: python-version: \"3.10\" - name: Checkout public repo site uses: actions/checkout@v3 with: token: ${{ secrets.GH_PAGES}} repository: np-completed/np-completed.github.io ref: gh_pages path: site - name: Install dependencies run: python3 -m pip install -r code/requirements.txt - name: Build website run: mkdocs build --config-file code/mkdocs.yml - name: Clean Website run: | pushd site git rm -rf . popd - name: Copy website run : | pushd site # cp -rvf ../code/build/* . cp -rvf ../code/site/* . popd ls -la site/ # ls -la code/site/ - name: Deploy and Publish run: | git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\" git config --global user.name \"github-actions\" pushd site git add . git commit -m \"mkdocs build from Action ${GITHUB_SHA}\" git push origin gh_pages popd Each push changes to the private repository triggers the github action. Next, the GH action job will be executed, to build and publish the site to the public repo without exposing your source code.","title":"Create github action in private repoPermalink"},{"location":"hosting-and-deployment/gh-pages/","text":"Host on GitHub Pages Demo site on GitHub Pages (build & deploy with GitHub Actions) Build and deploy with GitHub Actions peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details. Build and deploy with mkdocs gh-deploy pipenv pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"Github Pages"},{"location":"hosting-and-deployment/gh-pages/#host-on-github-pages","text":"Demo site on GitHub Pages (build & deploy with GitHub Actions)","title":"Host on GitHub Pages"},{"location":"hosting-and-deployment/gh-pages/#build-and-deploy-with-github-actions","text":"peaceiris/actions-gh-pages: GitHub Actions for deploying to GitHub Pages with Static Site Generators Go to the repository and read the latest README.md for more details.","title":"Build and deploy with GitHub Actions"},{"location":"hosting-and-deployment/gh-pages/#build-and-deploy-with-mkdocs-gh-deploy","text":"","title":"Build and deploy with mkdocs gh-deploy"},{"location":"hosting-and-deployment/gh-pages/#pipenv","text":"pipenv run deploy # OR pipenv shell mkdocs gh-deploy # OR pipenv run mkdocs gh-deploy","title":"pipenv"},{"location":"hosting-and-deployment/newfile/","text":"Heading some content","title":"New File"},{"location":"hosting-and-deployment/newfile/#heading","text":"some content","title":"Heading"}]}